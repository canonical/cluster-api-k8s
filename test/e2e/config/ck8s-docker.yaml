---
# E2E test scenario using local dev images and manifests built from the source tree for following providers:
# - cluster-api
# - bootstrap ck8s
# - control-plane ck8s
# - docker
images:
  # Use local dev images built source tree;
  - name: ghcr.io/canonical/cluster-api-k8s/controlplane-controller:dev
    loadBehavior: mustLoad
  - name: ghcr.io/canonical/cluster-api-k8s/bootstrap-controller:dev
    loadBehavior: mustLoad

providers:
  - name: cluster-api
    type: CoreProvider
    versions:
      - name: v1.8.4
        value: https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.8.4/core-components.yaml
        type: url
        files:
          - sourcePath: "../data/shared/v1beta1/metadata.yaml"
        replacements:
          - old: "imagePullPolicy: Always"
            new: "imagePullPolicy: IfNotPresent"
  - name: docker
    type: InfrastructureProvider
    versions:
      # By default, will use the latest version defined in ../data/shared/v1beta1/metadata.yaml
      # to init the management cluster
      - name: v1.8.4 # used during e2e-test
        value: https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.8.4/infrastructure-components-development.yaml
        type: url
        files:
          - sourcePath: "../data/shared/v1beta1/metadata.yaml"
        replacements:
          - old: "imagePullPolicy: Always"
            new: "imagePullPolicy: IfNotPresent"

      # Add v1.7.99 to support tilt (not presented in ../data/shared/v1beta1/metadata.yaml)
      # when bootstrapping with tilt, it will use
      # the defaultProviderVersion in https://github.com/kubernetes-sigs/cluster-api/blob/main/hack/tools/internal/tilt-prepare/main.go as
      # default version for docker infrastructure provider
      # name here should match defaultProviderVersion
      - name: v1.7.99 # next; use manifest from source files
        value: https://github.com/kubernetes-sigs/cluster-api/releases/latest/download/infrastructure-components-development.yaml
        type: url
        files:
          - sourcePath: "../data/shared/v1beta1/metadata.yaml"
        replacements:
          - old: "imagePullPolicy: Always"
            new: "imagePullPolicy: IfNotPresent"
    files:
      - sourcePath: "../data/infrastructure-docker/cluster-template-kcp-remediation.yaml"
      - sourcePath: "../data/infrastructure-docker/cluster-template-md-remediation.yaml"
      - sourcePath: "../data/infrastructure-docker/cluster-template-upgrades.yaml"
      - sourcePath: "../data/infrastructure-docker/cluster-template.yaml"
  - name: ck8s
    type: BootstrapProvider
    versions:
      # Could add older release version for upgrading test, but
      # by default, will only use the latest version defined in
      # ${ProjectRoot}/metadata.yaml to init the management cluster
      # this version should be updated when ${ProjectRoot}/metadata.yaml
      # is modified
      - name: v0.4.99 # next; use manifest from source files
        value: "../../../bootstrap/config/default"
        replacements:
          - old: "ghcr.io/canonical/cluster-api-k8s/bootstrap-controller:latest"
            new: "ghcr.io/canonical/cluster-api-k8s/bootstrap-controller:dev"
    files:
      - sourcePath: "../../../metadata.yaml"
        targetName: "metadata.yaml"
  - name: ck8s
    type: ControlPlaneProvider
    versions:
      - name: v0.4.99 # next; use manifest from source files
        value: "../../../controlplane/config/default"
        replacements:
          - old: "ghcr.io/canonical/cluster-api-k8s/controlplane-controller:latest"
            new: "ghcr.io/canonical/cluster-api-k8s/controlplane-controller:dev"
    files:
      - sourcePath: "../../../metadata.yaml"
        targetName: "metadata.yaml"

variables:
  KUBERNETES_VERSION_MANAGEMENT: "v1.28.0"
  KUBERNETES_VERSION: "v1.29.6"
  KUBERNETES_VERSION_UPGRADE_TO: "v1.30.3"
  IP_FAMILY: "IPv4"
  KIND_IMAGE_VERSION: "v1.28.0"
  IN_PLACE_UPGRADE_OPTION: "localPath=/k8s/upgrade/bin/kubernetes"

intervals:
  # The array is defined as [timeout, polling interval]
  # copied from https://github.com/kubernetes-sigs/cluster-api/blob/main/test/e2e/config/docker.yaml
  default/wait-controllers: ["3m", "10s"]
  default/wait-cluster: ["5m", "10s"]
  default/wait-control-plane: ["10m", "10s"]
  default/wait-worker-nodes: ["10m", "10s"]
  default/wait-machine-pool-nodes: ["5m", "10s"]
  default/wait-delete-cluster: ["3m", "10s"]
  default/wait-machine-upgrade: ["30m", "10s"]
  default/wait-machine-pool-upgrade: ["5m", "10s"]
  default/wait-nodes-ready: ["10m", "10s"]
  default/wait-machine-remediation: ["5m", "10s"]
  default/wait-autoscaler: ["5m", "10s"]
  default/wait-machine-refresh: ["5m", "10s"]
  node-drain/wait-deployment-available: ["3m", "10s"]
  node-drain/wait-control-plane: ["15m", "10s"]
  node-drain/wait-machine-deleted: ["2m", "10s"]
  kcp-remediation/wait-machines: ["5m", "10s"]
  kcp-remediation/check-machines-stable: ["30s", "5s"]
  kcp-remediation/wait-machine-provisioned: ["5m", "10s"]
  #  Giving a bit more time during scale tests, we analyze independently if everything works quickly enough.
  scale/wait-cluster: ["10m", "10s"]
  scale/wait-control-plane: ["20m", "10s"]
  scale/wait-worker-nodes: ["20m", "10s"]
