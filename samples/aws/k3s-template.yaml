apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    ccm: external
    cni: ${CLUSTER_NAME}-crs-0
    csi: external
  name: ${CLUSTER_NAME}
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KThreesControlPlane
    name: ${CLUSTER_NAME}-control-plane
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AWSCluster
    name: ${CLUSTER_NAME}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSCluster
metadata:
  name: ${CLUSTER_NAME}
spec:
#  bastion:
#    enabled: true
  network:
    vpc:
      availabilityZoneUsageLimit: 1
    cni:
      cniIngressRules:
      - description: flannel
        fromPort: 8472
        protocol: udp
        toPort: 8472
  region: ${AWS_REGION}
  sshKeyName: ${AWS_SSH_KEY_NAME}
  controlPlaneLoadBalancer:
    # k3s creates elliptic-curve keypair by default but ELB healthcheck TLS client doesn't support it.
    healthCheckProtocol: TCP
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KThreesControlPlane
metadata:
  name: ${CLUSTER_NAME}-control-plane
  namespace: default
spec:
  infrastructureTemplate:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AWSMachineTemplate
    name: ${CLUSTER_NAME}-control-plane
  kthreesConfigSpec:
    disableComponents:
      # not needed since we're using AWS load balancer (ccm: external)
      - servicelb
    agentConfig:
      nodeName: "{{ ds.meta_data.local_hostname }}"
  replicas: 1
  version: v1.21.5+k3s2
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-control-plane
spec:
  template:
    spec:
      ami:
        id: ami-083654bd07b5da81d
      cloudInit:
        insecureSkipSecretsManager: true
      iamInstanceProfile: control-plane.cluster-api-provider-aws.sigs.k8s.io
      instanceType: ${AWS_CONTROL_PLANE_MACHINE_TYPE}
      sshKeyName: ${AWS_SSH_KEY_NAME}
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  clusterName: ${CLUSTER_NAME}
  replicas: ${WORKER_MACHINE_COUNT}
  selector:
    matchLabels: null
  template:
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KThreesConfigTemplate
          name: ${CLUSTER_NAME}-md-0
      clusterName: ${CLUSTER_NAME}
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        name: ${CLUSTER_NAME}-md-0
      version: v1.21.5+k3s2
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
spec:
  template:
    spec:
      ami:
        id: ami-083654bd07b5da81d
      cloudInit:
        insecureSkipSecretsManager: true
      iamInstanceProfile: nodes.cluster-api-provider-aws.sigs.k8s.io
      instanceType: ${AWS_NODE_MACHINE_TYPE}
      sshKeyName: ${AWS_SSH_KEY_NAME}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KThreesConfigTemplate
metadata:
  name: ${CLUSTER_NAME}-md-0
  namespace: default
spec:
  template:
    spec:
      agentConfig:
        nodeName: "{{ ds.meta_data.local_hostname }}"
